/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MyContractInterface extends utils.Interface {
  functions: {
    "user1()": FunctionFragment;
    "user2()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "user1" | "user2"): FunctionFragment;

  encodeFunctionData(functionFragment: "user1", values?: undefined): string;
  encodeFunctionData(functionFragment: "user2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "user1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "user2", data: BytesLike): Result;

  events: {
    "Receive(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Receive"): EventFragment;
}

export interface ReceiveEventObject {
  from: string;
  amount: BigNumber;
}
export type ReceiveEvent = TypedEvent<[string, BigNumber], ReceiveEventObject>;

export type ReceiveEventFilter = TypedEventFilter<ReceiveEvent>;

export interface MyContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MyContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    user1(overrides?: CallOverrides): Promise<[string]>;

    user2(overrides?: CallOverrides): Promise<[string]>;
  };

  user1(overrides?: CallOverrides): Promise<string>;

  user2(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    user1(overrides?: CallOverrides): Promise<string>;

    user2(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Receive(address,uint256)"(from?: null, amount?: null): ReceiveEventFilter;
    Receive(from?: null, amount?: null): ReceiveEventFilter;
  };

  estimateGas: {
    user1(overrides?: CallOverrides): Promise<BigNumber>;

    user2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    user1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
